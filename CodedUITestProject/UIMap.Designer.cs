// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom Coded UI-Test-Generator generiert.
//      Version: 15.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      Coded UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// vorbereitungTest1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uIKundennameEdit = this.UIMainWindowWindow.UIInhaltPane.UIKundennameEdit;
            WpfDatePicker uIDateDatePicker = this.UIMainWindowWindow.UIInhaltPane.UIDateDatePicker;
            WpfPane uIInhaltPane = this.UIMainWindowWindow.UIInhaltPane;
            WpfButton uIPART_ButtonButton = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton;
            WpfControl uIPART_ThumbIndicator = this.UIMainWindowWindow.UIItem6ToggleButton.UIPART_ThumbIndicator;
            WpfControl uIPART_ThumbIndicator1 = this.UIMainWindowWindow.UIItem29ToggleButton.UIPART_ThumbIndicator;
            WpfButton uIPART_ButtonButton1 = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton1;
            WpfRadioButton uIPMRadioButton = this.UIMainWindowWindow.UIPMRadioButton;
            WpfControl uIPART_ThumbIndicator2 = this.UIMainWindowWindow.UIItem6ToggleButton1.UIPART_ThumbIndicator;
            WpfControl uIPART_ThumbIndicator3 = this.UIMainWindowWindow.UIItem29ToggleButton1.UIPART_ThumbIndicator;
            WpfComboBox uIPlatzComboBox = this.UIMainWindowWindow.UIInhaltPane.UIPlatzComboBox;
            WpfButton uISpeichernButton = this.UIMainWindowWindow.UIInhaltPane.UISpeichernButton;
            WinButton uIJAButton = this.UISicherWindow.UIJAWindow.UIJAButton;
            WpfButton uIPlätzeButton = this.UIMainWindowWindow.UIPlätzeButton;
            WpfText uIPlatzAAussenText = this.UIMainWindowWindow.UIItemCustom.UIPlatzAnzeigeTable.UIItem2Row.UIPlatzAAussenCell.UIPlatzAAussenText;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(104, 12));

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(78, 17));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(33, 28));

            // "Rene" in "kundenname" Textfeld eingeben
            uIKundennameEdit.Text = this.RecordedMethod1Params.UIKundennameEditText;

            // "22-Jun-2018" in "date" Datumsauswahl auswählen
            uIDateDatePicker.DateAsString = this.RecordedMethod1Params.UIDateDatePickerDateAsString;

            // Klicken "inhalt" Bereich
            Mouse.Click(uIInhaltPane, new Point(403, 378));

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton, new Point(4, 15));

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator, new Point(22, 20));

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator1, new Point(2, 11));

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton1, new Point(14, 4));

            // "PM" Optionsfeld auswählen
            uIPMRadioButton.Selected = this.RecordedMethod1Params.UIPMRadioButtonSelected;

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator2, new Point(23, 18));

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator3, new Point(3, 8));

            // "2" in "platz" Kombinationsfeld auswählen
            uIPlatzComboBox.SelectedItem = this.RecordedMethod1Params.UIPlatzComboBoxSelectedItem;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(53, 25));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(57, 9));

            // Klicken "Plätze" Schaltfläche
            Mouse.Click(uIPlätzeButton, new Point(47, 11));

            // Doppelklicken "Platz A Aussen" Bezeichnung
            Mouse.DoubleClick(uIPlatzAAussenText, new Point(70, 13));
        }
        
        /// <summary>
        /// ueberpruefePlatz - Verwenden Sie "ueberpruefePlatzExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void ueberpruefePlatz()
        {
            #region Variable Declarations
            WpfText uIPlatzAAussenText = this.UIMainWindowWindow.UIItemCustom1.UIReservationenTable.UIItem3Row.UIPlatzAAussenCell.UIPlatzAAussenText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
            Assert.AreEqual(this.ueberpruefePlatzExpectedValues.UIPlatzAAussenTextDisplayText, uIPlatzAAussenText.DisplayText, "Falscher Platz gespeichert");
        }
        
        /// <summary>
        /// sucheNachNamen - Verwenden Sie "sucheNachNamenParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void sucheNachNamen()
        {
            #region Variable Declarations
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uISearchIDEdit = this.UIMainWindowWindow.UIInhaltPane.UISearchIDEdit;
            WpfButton uISuchenButton = this.UIMainWindowWindow.UIInhaltPane.UISuchenButton;
            #endregion

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(46, 16));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(27, 14));

            // "Rene" in "searchID" Textfeld eingeben
            uISearchIDEdit.Text = this.sucheNachNamenParams.UISearchIDEditText;

            // Klicken "suchen" Schaltfläche
            Mouse.Click(uISuchenButton, new Point(30, 23));
        }
        
        /// <summary>
        /// VergleicheNamen - Verwenden Sie "VergleicheNamenExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void VergleicheNamen()
        {
            #region Variable Declarations
            WpfText uIReneText = this.UIMainWindowWindow.UIItemCustom1.UIReservationenTable.UIItem3Row.UIReneCell.UIReneText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Rene" Bezeichnung ist gleich 'Rene'
            Assert.AreEqual(this.VergleicheNamenExpectedValues.UIReneTextDisplayText, uIReneText.DisplayText, "Falscher Name");
        }
        
        /// <summary>
        /// VorbereitungNegativTest - Verwenden Sie "VorbereitungNegativTestParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void VorbereitungNegativTest()
        {
            #region Variable Declarations
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uISearchIDEdit = this.UIMainWindowWindow.UIInhaltPane.UISearchIDEdit;
            WpfButton uISuchenButton = this.UIMainWindowWindow.UIInhaltPane.UISuchenButton;
            #endregion

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(73, 15));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(30, 15));

            // "tom" in "searchID" Textfeld eingeben
            uISearchIDEdit.Text = this.VorbereitungNegativTestParams.UISearchIDEditText;

            // Klicken "suchen" Schaltfläche
            Mouse.Click(uISuchenButton, new Point(46, 15));
        }
        
        /// <summary>
        /// FehlerMeldung - Verwenden Sie "FehlerMeldungExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void FehlerMeldung()
        {
            #region Variable Declarations
            WinText uIEssindkeineReservatiText = this.UIEssindkeineReservatiWindow.UIEssindkeineReservatiText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Es sind keine Reservationen für den Namen: vorhand..." Bezeichnung ist gleich 'Es sind keine Reservationen für den Namen:  vorhanden'
            Assert.AreEqual(this.FehlerMeldungExpectedValues.UIEssindkeineReservatiTextDisplayText, uIEssindkeineReservatiText.DisplayText, "Fehler Meldung nicht funktional");
        }
        
        /// <summary>
        /// schliesseProgramm
        /// </summary>
        public void schliesseProgramm()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIItemWindow.UIItemWindow1.UIItemTitleBar.UISchließenButton;
            WinButton uISchließenButton1 = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(11, 12));

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton1, new Point(11, 15));
        }
        
        /// <summary>
        /// BenutzerErstellen - Verwenden Sie "BenutzerErstellenParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void BenutzerErstellen()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uIKundennameEdit = this.UIMainWindowWindow.UIInhaltPane.UIKundennameEdit;
            WpfDatePicker uIDateDatePicker = this.UIMainWindowWindow.UIInhaltPane.UIDateDatePicker;
            WpfButton uIPART_ButtonButton = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton;
            WpfToggleButton uIItem1ToggleButton = this.UIMainWindowWindow.UIItem1ToggleButton;
            WpfControl uIPART_ThumbIndicator = this.UIMainWindowWindow.UIItem10ToggleButton.UIPART_ThumbIndicator;
            WpfButton uIPART_ButtonButton1 = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton1;
            WpfRadioButton uIPMRadioButton = this.UIMainWindowWindow.UIPMRadioButton;
            WpfControl uIPART_ThumbIndicator1 = this.UIMainWindowWindow.UIItem3ToggleButton.UIPART_ThumbIndicator;
            WpfControl uIPART_ThumbIndicator2 = this.UIMainWindowWindow.UIItem11ToggleButton.UIPART_ThumbIndicator;
            WpfComboBox uIPlatzComboBox = this.UIMainWindowWindow.UIInhaltPane.UIPlatzComboBox;
            WpfButton uISpeichernButton = this.UIMainWindowWindow.UIInhaltPane.UISpeichernButton;
            WinButton uIJAButton = this.UISicherWindow.UIJAWindow.UIJAButton;
            WpfButton uIPlätzeButton = this.UIMainWindowWindow.UIPlätzeButton;
            WpfText uIFalseText = this.UIMainWindowWindow.UIItemCustom.UIPlatzAnzeigeTable.UIItem2Row.UIFalseCell.UIFalseText;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(96, 9));

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(74, 15));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(30, 11));

            // "Rene" in "kundenname" Textfeld eingeben
            uIKundennameEdit.Text = this.BenutzerErstellenParams.UIKundennameEditText;

            // "23-Jun-2018" in "date" Datumsauswahl auswählen
            uIDateDatePicker.DateAsString = this.BenutzerErstellenParams.UIDateDatePickerDateAsString;

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton, new Point(11, 11));

            // Auf Zustand "Pressed" festlegen ""1"-Umschaltfläche"
            uIItem1ToggleButton.Pressed = this.BenutzerErstellenParams.UIItem1ToggleButtonPressed;

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator, new Point(14, 27));

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton1, new Point(11, 1));

            // "PM" Optionsfeld auswählen
            uIPMRadioButton.Selected = this.BenutzerErstellenParams.UIPMRadioButtonSelected;

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator1, new Point(26, 13));

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator2, new Point(11, 1));

            // "2" in "platz" Kombinationsfeld auswählen
            uIPlatzComboBox.SelectedItem = this.BenutzerErstellenParams.UIPlatzComboBoxSelectedItem;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(51, 14));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(32, 15));

            // Klicken "Plätze" Schaltfläche
            Mouse.Click(uIPlätzeButton, new Point(80, 21));

            // Doppelklicken "False" Bezeichnung
            Mouse.DoubleClick(uIFalseText, new Point(26, 7));
        }
        
        /// <summary>
        /// TestePlatzName - Verwenden Sie "TestePlatzNameExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void TestePlatzName()
        {
            #region Variable Declarations
            WpfText uIPlatzAAussenText = this.UIMainWindowWindow.UIItemCustom1.UIReservationenTable.UIItem4Row.UIPlatzAAussenCell.UIPlatzAAussenText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
            Assert.AreEqual(this.TestePlatzNameExpectedValues.UIPlatzAAussenTextDisplayText, uIPlatzAAussenText.DisplayText, "falscher Platz");
        }
        
        /// <summary>
        /// VorbereitungPlatzTest - Verwenden Sie "VorbereitungPlatzTestParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void VorbereitungPlatzTest()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UIM120ProjektexeListItem.UINameEdit;
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uISearchIDEdit = this.UIMainWindowWindow.UIInhaltPane.UISearchIDEdit;
            WpfEdit uIKundennameEdit = this.UIMainWindowWindow.UIInhaltPane.UIKundennameEdit;
            WpfCustom uIItemCustom = this.UIMainWindowWindow.UIInhaltPane.UIItemCustom;
            WpfDatePicker uIDateDatePicker = this.UIMainWindowWindow.UIInhaltPane.UIDateDatePicker;
            WpfPane uIInhaltPane = this.UIMainWindowWindow.UIInhaltPane;
            WpfEdit uIPART_TextBoxEdit = this.UIMainWindowWindow.UIInhaltPane.UIPART_TextBoxEdit;
            WpfButton uIPART_ButtonButton = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton;
            WpfToggleButton uIItem12ToggleButton = this.UIMainWindowWindow.UIItem12ToggleButton;
            WpfToggleButton uIItem0ToggleButton = this.UIMainWindowWindow.UIItem0ToggleButton;
            WpfButton uIPART_ButtonButton1 = this.UIMainWindowWindow.UIInhaltPane.UIPART_ButtonButton1;
            WpfRadioButton uIPMRadioButton = this.UIMainWindowWindow.UIPMRadioButton;
            WpfControl uIPART_ThumbIndicator = this.UIMainWindowWindow.UIItem11ToggleButton.UIPART_ThumbIndicator;
            WpfControl uIPART_ThumbIndicator1 = this.UIMainWindowWindow.UIItem55ToggleButton.UIPART_ThumbIndicator;
            WpfComboBox uIPlatzComboBox = this.UIMainWindowWindow.UIInhaltPane.UIPlatzComboBox;
            WpfButton uISpeichernButton = this.UIMainWindowWindow.UIInhaltPane.UISpeichernButton;
            WinButton uIJAButton = this.UISicherWindow.UIJAWindow.UIJAButton;
            WpfButton uIPlätzeButton = this.UIMainWindowWindow.UIPlätzeButton;
            WpfCell uIPlatzAAussenCell = this.UIMainWindowWindow.UIItemCustom.UIPlatzAnzeigeTable.UIItem2Row.UIPlatzAAussenCell;
            #endregion

            // Doppelklicken "Name" Textfeld
            Mouse.DoubleClick(uINameEdit, new Point(135, 12));

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(70, 16));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(23, 17));

            // "" in "searchID" Textfeld eingeben
            uISearchIDEdit.Text = this.VorbereitungPlatzTestParams.UISearchIDEditText;

            // "{Back}" in "searchID" Textfeld eingeben
            Keyboard.SendKeys(uISearchIDEdit, this.VorbereitungPlatzTestParams.UISearchIDEditSendKeys, ModifierKeys.None);

            // "Ralf" in "kundenname" Textfeld eingeben
            uIKundennameEdit.Text = this.VorbereitungPlatzTestParams.UIKundennameEditText;

            // Klicken Benutzerdefiniertes Steuerelement
            Mouse.Click(uIItemCustom, new Point(406, 100));

            // "22-Jun-2018" in "date" Datumsauswahl auswählen
            uIDateDatePicker.DateAsString = this.VorbereitungPlatzTestParams.UIDateDatePickerDateAsString;

            // Klicken "inhalt" Bereich
            Mouse.Click(uIInhaltPane, new Point(405, 370));

            // Klicken "PART_TextBox" Textfeld
            Mouse.Click(uIPART_TextBoxEdit, new Point(176, 6));

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton, new Point(3, 9));

            // Klicken "12" Umschaltfläche
            Mouse.Click(uIItem12ToggleButton, new Point(15, 14));

            // Klicken "0" Umschaltfläche
            Mouse.Click(uIItem0ToggleButton, new Point(15, 14));

            // Klicken "inhalt" Bereich
            Mouse.Click(uIInhaltPane, new Point(360, 304));

            // Klicken "PART_Button" Schaltfläche
            Mouse.Click(uIPART_ButtonButton1, new Point(13, 2));

            // "PM" Optionsfeld auswählen
            uIPMRadioButton.Selected = this.VorbereitungPlatzTestParams.UIPMRadioButtonSelected;

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator, new Point(20, 6));

            // Klicken "PART_Thumb" Indicator
            Mouse.Click(uIPART_ThumbIndicator1, new Point(20, 6));

            // Doppelklicken "inhalt" Bereich
            Mouse.DoubleClick(uIInhaltPane, new Point(317, 356));

            // "2" in "platz" Kombinationsfeld auswählen
            uIPlatzComboBox.SelectedItem = this.VorbereitungPlatzTestParams.UIPlatzComboBoxSelectedItem;

            // Klicken "Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(45, 16));

            // Klicken "&Ja" Schaltfläche
            Mouse.Click(uIJAButton, new Point(32, 11));

            // Klicken "Plätze" Schaltfläche
            Mouse.Click(uIPlätzeButton, new Point(94, 9));

            // Doppelklicken "Platz A Aussen" Zelle
            Mouse.DoubleClick(uIPlatzAAussenCell, new Point(147, 20));
        }
        
        /// <summary>
        /// AssertPlatzNamen - Verwenden Sie "AssertPlatzNamenExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertPlatzNamen()
        {
            #region Variable Declarations
            WpfText uIPlatzAAussenText = this.UIMainWindowWindow.UIItemCustom1.UIReservationenTable.UIItem5Row.UIPlatzAAussenCell.UIPlatzAAussenText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
            Assert.AreEqual(this.AssertPlatzNamenExpectedValues.UIPlatzAAussenTextDisplayText, uIPlatzAAussenText.DisplayText, "Falscher Platz");
        }
        
        /// <summary>
        /// VorbereitungNamensTest - Verwenden Sie "VorbereitungNamensTestParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void VorbereitungNamensTest()
        {
            #region Variable Declarations
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uISearchIDEdit = this.UIMainWindowWindow.UIInhaltPane.UISearchIDEdit;
            WpfButton uISuchenButton = this.UIMainWindowWindow.UIInhaltPane.UISuchenButton;
            #endregion

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(53, 20));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(16, 15));

            // "Ralf" in "searchID" Textfeld eingeben
            uISearchIDEdit.Text = this.VorbereitungNamensTestParams.UISearchIDEditText;

            // Klicken "suchen" Schaltfläche
            Mouse.Click(uISuchenButton, new Point(56, 15));
        }
        
        /// <summary>
        /// AssertSpielernamen - Verwenden Sie "AssertSpielernamenExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertSpielernamen()
        {
            #region Variable Declarations
            WpfText uIRalfText = this.UIMainWindowWindow.UIItemCustom1.UIReservationenTable.UIItem5Row.UIRalfCell.UIRalfText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Ralf" Bezeichnung ist gleich 'Ralf'
            Assert.AreEqual(this.AssertSpielernamenExpectedValues.UIRalfTextDisplayText, uIRalfText.DisplayText, "Falscher Name");
        }
        
        /// <summary>
        /// NegativVorbereitung - Verwenden Sie "NegativVorbereitungParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void NegativVorbereitung()
        {
            #region Variable Declarations
            WpfButton uIAnzeigeButton = this.UIMainWindowWindow.UIAnzeigeButton;
            WpfButton uIReservierenButton = this.UIMainWindowWindow.UIReservierenButton;
            WpfButton uINeuButton = this.UIMainWindowWindow.UIInhaltPane.UINeuButton;
            WpfEdit uISearchIDEdit = this.UIMainWindowWindow.UIInhaltPane.UISearchIDEdit;
            WpfButton uISuchenButton = this.UIMainWindowWindow.UIInhaltPane.UISuchenButton;
            #endregion

            // Klicken "Anzeige" Schaltfläche
            Mouse.Click(uIAnzeigeButton, new Point(71, 13));

            // Klicken "Reservieren" Schaltfläche
            Mouse.Click(uIReservierenButton, new Point(74, 26));

            // Klicken "neu" Schaltfläche
            Mouse.Click(uINeuButton, new Point(35, 23));

            // "Cedric" in "searchID" Textfeld eingeben
            uISearchIDEdit.Text = this.NegativVorbereitungParams.UISearchIDEditText;

            // Klicken "suchen" Schaltfläche
            Mouse.Click(uISuchenButton, new Point(56, 21));
        }
        
        /// <summary>
        /// AssertFalschMeldung - Verwenden Sie "AssertFalschMeldungExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertFalschMeldung()
        {
            #region Variable Declarations
            WinText uIEssindkeineReservatiText = this.UIEssindkeineReservatiWindow.UIEssindkeineReservatiText;
            #endregion

            // Sicherstellen, dass die Eigenschaft 'DisplayText' von "Es sind keine Reservationen für den Namen: vorhand..." Bezeichnung ist gleich 'Es sind keine Reservationen für den Namen:  vorhanden'
            Assert.AreEqual(this.AssertFalschMeldungExpectedValues.UIEssindkeineReservatiTextDisplayText, uIEssindkeineReservatiText.DisplayText, "Falsche Meldung");
        }
        
        /// <summary>
        /// FensterSchliessen
        /// </summary>
        public void FensterSchliessen()
        {
            #region Variable Declarations
            WinButton uISchließenButton = this.UIItemWindow.UIItemWindow1.UIItemTitleBar.UISchließenButton;
            WinButton uISchließenButton1 = this.UIMainWindowWindow1.UISchließenButton;
            #endregion

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(12, 11));

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton1, new Point(22, 16));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual ueberpruefePlatzExpectedValues ueberpruefePlatzExpectedValues
        {
            get
            {
                if ((this.mueberpruefePlatzExpectedValues == null))
                {
                    this.mueberpruefePlatzExpectedValues = new ueberpruefePlatzExpectedValues();
                }
                return this.mueberpruefePlatzExpectedValues;
            }
        }
        
        public virtual sucheNachNamenParams sucheNachNamenParams
        {
            get
            {
                if ((this.msucheNachNamenParams == null))
                {
                    this.msucheNachNamenParams = new sucheNachNamenParams();
                }
                return this.msucheNachNamenParams;
            }
        }
        
        public virtual VergleicheNamenExpectedValues VergleicheNamenExpectedValues
        {
            get
            {
                if ((this.mVergleicheNamenExpectedValues == null))
                {
                    this.mVergleicheNamenExpectedValues = new VergleicheNamenExpectedValues();
                }
                return this.mVergleicheNamenExpectedValues;
            }
        }
        
        public virtual VorbereitungNegativTestParams VorbereitungNegativTestParams
        {
            get
            {
                if ((this.mVorbereitungNegativTestParams == null))
                {
                    this.mVorbereitungNegativTestParams = new VorbereitungNegativTestParams();
                }
                return this.mVorbereitungNegativTestParams;
            }
        }
        
        public virtual FehlerMeldungExpectedValues FehlerMeldungExpectedValues
        {
            get
            {
                if ((this.mFehlerMeldungExpectedValues == null))
                {
                    this.mFehlerMeldungExpectedValues = new FehlerMeldungExpectedValues();
                }
                return this.mFehlerMeldungExpectedValues;
            }
        }
        
        public virtual BenutzerErstellenParams BenutzerErstellenParams
        {
            get
            {
                if ((this.mBenutzerErstellenParams == null))
                {
                    this.mBenutzerErstellenParams = new BenutzerErstellenParams();
                }
                return this.mBenutzerErstellenParams;
            }
        }
        
        public virtual TestePlatzNameExpectedValues TestePlatzNameExpectedValues
        {
            get
            {
                if ((this.mTestePlatzNameExpectedValues == null))
                {
                    this.mTestePlatzNameExpectedValues = new TestePlatzNameExpectedValues();
                }
                return this.mTestePlatzNameExpectedValues;
            }
        }
        
        public virtual VorbereitungPlatzTestParams VorbereitungPlatzTestParams
        {
            get
            {
                if ((this.mVorbereitungPlatzTestParams == null))
                {
                    this.mVorbereitungPlatzTestParams = new VorbereitungPlatzTestParams();
                }
                return this.mVorbereitungPlatzTestParams;
            }
        }
        
        public virtual AssertPlatzNamenExpectedValues AssertPlatzNamenExpectedValues
        {
            get
            {
                if ((this.mAssertPlatzNamenExpectedValues == null))
                {
                    this.mAssertPlatzNamenExpectedValues = new AssertPlatzNamenExpectedValues();
                }
                return this.mAssertPlatzNamenExpectedValues;
            }
        }
        
        public virtual VorbereitungNamensTestParams VorbereitungNamensTestParams
        {
            get
            {
                if ((this.mVorbereitungNamensTestParams == null))
                {
                    this.mVorbereitungNamensTestParams = new VorbereitungNamensTestParams();
                }
                return this.mVorbereitungNamensTestParams;
            }
        }
        
        public virtual AssertSpielernamenExpectedValues AssertSpielernamenExpectedValues
        {
            get
            {
                if ((this.mAssertSpielernamenExpectedValues == null))
                {
                    this.mAssertSpielernamenExpectedValues = new AssertSpielernamenExpectedValues();
                }
                return this.mAssertSpielernamenExpectedValues;
            }
        }
        
        public virtual NegativVorbereitungParams NegativVorbereitungParams
        {
            get
            {
                if ((this.mNegativVorbereitungParams == null))
                {
                    this.mNegativVorbereitungParams = new NegativVorbereitungParams();
                }
                return this.mNegativVorbereitungParams;
            }
        }
        
        public virtual AssertFalschMeldungExpectedValues AssertFalschMeldungExpectedValues
        {
            get
            {
                if ((this.mAssertFalschMeldungExpectedValues == null))
                {
                    this.mAssertFalschMeldungExpectedValues = new AssertFalschMeldungExpectedValues();
                }
                return this.mAssertFalschMeldungExpectedValues;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UISicherWindow UISicherWindow
        {
            get
            {
                if ((this.mUISicherWindow == null))
                {
                    this.mUISicherWindow = new UISicherWindow();
                }
                return this.mUISicherWindow;
            }
        }
        
        public UIEssindkeineReservatiWindow UIEssindkeineReservatiWindow
        {
            get
            {
                if ((this.mUIEssindkeineReservatiWindow == null))
                {
                    this.mUIEssindkeineReservatiWindow = new UIEssindkeineReservatiWindow();
                }
                return this.mUIEssindkeineReservatiWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIMainWindowWindow1 UIMainWindowWindow1
        {
            get
            {
                if ((this.mUIMainWindowWindow1 == null))
                {
                    this.mUIMainWindowWindow1 = new UIMainWindowWindow1();
                }
                return this.mUIMainWindowWindow1;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private ueberpruefePlatzExpectedValues mueberpruefePlatzExpectedValues;
        
        private sucheNachNamenParams msucheNachNamenParams;
        
        private VergleicheNamenExpectedValues mVergleicheNamenExpectedValues;
        
        private VorbereitungNegativTestParams mVorbereitungNegativTestParams;
        
        private FehlerMeldungExpectedValues mFehlerMeldungExpectedValues;
        
        private BenutzerErstellenParams mBenutzerErstellenParams;
        
        private TestePlatzNameExpectedValues mTestePlatzNameExpectedValues;
        
        private VorbereitungPlatzTestParams mVorbereitungPlatzTestParams;
        
        private AssertPlatzNamenExpectedValues mAssertPlatzNamenExpectedValues;
        
        private VorbereitungNamensTestParams mVorbereitungNamensTestParams;
        
        private AssertSpielernamenExpectedValues mAssertSpielernamenExpectedValues;
        
        private NegativVorbereitungParams mNegativVorbereitungParams;
        
        private AssertFalschMeldungExpectedValues mAssertFalschMeldungExpectedValues;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UISicherWindow mUISicherWindow;
        
        private UIEssindkeineReservatiWindow mUIEssindkeineReservatiWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIMainWindowWindow1 mUIMainWindowWindow1;
        #endregion
    }
    
    /// <summary>
    /// An "RecordedMethod1" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// "Rene" in "kundenname" Textfeld eingeben
        /// </summary>
        public string UIKundennameEditText = "Rene";
        
        /// <summary>
        /// "22-Jun-2018" in "date" Datumsauswahl auswählen
        /// </summary>
        public string UIDateDatePickerDateAsString = "22-Jun-2018";
        
        /// <summary>
        /// "PM" Optionsfeld auswählen
        /// </summary>
        public bool UIPMRadioButtonSelected = true;
        
        /// <summary>
        /// "2" in "platz" Kombinationsfeld auswählen
        /// </summary>
        public string UIPlatzComboBoxSelectedItem = "2";
        #endregion
    }
    
    /// <summary>
    /// An "ueberpruefePlatz" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class ueberpruefePlatzExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
        /// </summary>
        public string UIPlatzAAussenTextDisplayText = "Platz A Aussen";
        #endregion
    }
    
    /// <summary>
    /// An "sucheNachNamen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class sucheNachNamenParams
    {
        
        #region Fields
        /// <summary>
        /// "Rene" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditText = "Rene";
        #endregion
    }
    
    /// <summary>
    /// An "VergleicheNamen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class VergleicheNamenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Rene" Bezeichnung ist gleich 'Rene'
        /// </summary>
        public string UIReneTextDisplayText = "Rene";
        #endregion
    }
    
    /// <summary>
    /// An "VorbereitungNegativTest" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class VorbereitungNegativTestParams
    {
        
        #region Fields
        /// <summary>
        /// "tom" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditText = "tom";
        #endregion
    }
    
    /// <summary>
    /// An "FehlerMeldung" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class FehlerMeldungExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Es sind keine Reservationen für den Namen: vorhand..." Bezeichnung ist gleich 'Es sind keine Reservationen für den Namen:  vorhanden'
        /// </summary>
        public string UIEssindkeineReservatiTextDisplayText = "Es sind keine Reservationen für den Namen:  vorhanden";
        #endregion
    }
    
    /// <summary>
    /// An "BenutzerErstellen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class BenutzerErstellenParams
    {
        
        #region Fields
        /// <summary>
        /// "Rene" in "kundenname" Textfeld eingeben
        /// </summary>
        public string UIKundennameEditText = "Rene";
        
        /// <summary>
        /// "23-Jun-2018" in "date" Datumsauswahl auswählen
        /// </summary>
        public string UIDateDatePickerDateAsString = "23-Jun-2018";
        
        /// <summary>
        /// Auf Zustand "Pressed" festlegen ""1"-Umschaltfläche"
        /// </summary>
        public bool UIItem1ToggleButtonPressed = true;
        
        /// <summary>
        /// "PM" Optionsfeld auswählen
        /// </summary>
        public bool UIPMRadioButtonSelected = true;
        
        /// <summary>
        /// "2" in "platz" Kombinationsfeld auswählen
        /// </summary>
        public string UIPlatzComboBoxSelectedItem = "2";
        #endregion
    }
    
    /// <summary>
    /// An "TestePlatzName" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class TestePlatzNameExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
        /// </summary>
        public string UIPlatzAAussenTextDisplayText = "Platz A Aussen";
        #endregion
    }
    
    /// <summary>
    /// An "VorbereitungPlatzTest" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class VorbereitungPlatzTestParams
    {
        
        #region Fields
        /// <summary>
        /// "" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditText = "";
        
        /// <summary>
        /// "{Back}" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditSendKeys = "{Back}";
        
        /// <summary>
        /// "Ralf" in "kundenname" Textfeld eingeben
        /// </summary>
        public string UIKundennameEditText = "Ralf";
        
        /// <summary>
        /// "22-Jun-2018" in "date" Datumsauswahl auswählen
        /// </summary>
        public string UIDateDatePickerDateAsString = "22-Jun-2018";
        
        /// <summary>
        /// "PM" Optionsfeld auswählen
        /// </summary>
        public bool UIPMRadioButtonSelected = true;
        
        /// <summary>
        /// "2" in "platz" Kombinationsfeld auswählen
        /// </summary>
        public string UIPlatzComboBoxSelectedItem = "2";
        #endregion
    }
    
    /// <summary>
    /// An "AssertPlatzNamen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class AssertPlatzNamenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Platz A Aussen" Bezeichnung ist gleich 'Platz A Aussen'
        /// </summary>
        public string UIPlatzAAussenTextDisplayText = "Platz A Aussen";
        #endregion
    }
    
    /// <summary>
    /// An "VorbereitungNamensTest" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class VorbereitungNamensTestParams
    {
        
        #region Fields
        /// <summary>
        /// "Ralf" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditText = "Ralf";
        #endregion
    }
    
    /// <summary>
    /// An "AssertSpielernamen" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class AssertSpielernamenExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Ralf" Bezeichnung ist gleich 'Ralf'
        /// </summary>
        public string UIRalfTextDisplayText = "Ralf";
        #endregion
    }
    
    /// <summary>
    /// An "NegativVorbereitung" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class NegativVorbereitungParams
    {
        
        #region Fields
        /// <summary>
        /// "Cedric" in "searchID" Textfeld eingeben
        /// </summary>
        public string UISearchIDEditText = "Cedric";
        #endregion
    }
    
    /// <summary>
    /// An "AssertFalschMeldung" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class AssertFalschMeldungExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Sicherstellen, dass die Eigenschaft 'DisplayText' von "Es sind keine Reservationen für den Namen: vorhand..." Bezeichnung ist gleich 'Es sind keine Reservationen für den Namen:  vorhanden'
        /// </summary>
        public string UIEssindkeineReservatiTextDisplayText = "Es sind keine Reservationen für den Namen:  vorhanden";
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIM120ProjektexeListItem UIM120ProjektexeListItem
        {
            get
            {
                if ((this.mUIM120ProjektexeListItem == null))
                {
                    this.mUIM120ProjektexeListItem = new UIM120ProjektexeListItem(this);
                }
                return this.mUIM120ProjektexeListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIM120ProjektexeListItem mUIM120ProjektexeListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIM120ProjektexeListItem : WinListItem
    {
        
        public UIM120ProjektexeListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinListItem.PropertyNames.Name] = "M120Projekt.exe";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Suchkriterien
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIReservierenButton
        {
            get
            {
                if ((this.mUIReservierenButton == null))
                {
                    this.mUIReservierenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIReservierenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "reservation";
                    this.mUIReservierenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIReservierenButton;
            }
        }
        
        public UIInhaltPane UIInhaltPane
        {
            get
            {
                if ((this.mUIInhaltPane == null))
                {
                    this.mUIInhaltPane = new UIInhaltPane(this);
                }
                return this.mUIInhaltPane;
            }
        }
        
        public UIItem6ToggleButton UIItem6ToggleButton
        {
            get
            {
                if ((this.mUIItem6ToggleButton == null))
                {
                    this.mUIItem6ToggleButton = new UIItem6ToggleButton(this);
                }
                return this.mUIItem6ToggleButton;
            }
        }
        
        public UIItem29ToggleButton UIItem29ToggleButton
        {
            get
            {
                if ((this.mUIItem29ToggleButton == null))
                {
                    this.mUIItem29ToggleButton = new UIItem29ToggleButton(this);
                }
                return this.mUIItem29ToggleButton;
            }
        }
        
        public WpfRadioButton UIPMRadioButton
        {
            get
            {
                if ((this.mUIPMRadioButton == null))
                {
                    this.mUIPMRadioButton = new WpfRadioButton(this);
                    #region Suchkriterien
                    this.mUIPMRadioButton.SearchProperties[WpfRadioButton.PropertyNames.AutomationId] = "PMRadioButton";
                    this.mUIPMRadioButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPMRadioButton;
            }
        }
        
        public UIItem6ToggleButton1 UIItem6ToggleButton1
        {
            get
            {
                if ((this.mUIItem6ToggleButton1 == null))
                {
                    this.mUIItem6ToggleButton1 = new UIItem6ToggleButton1(this);
                }
                return this.mUIItem6ToggleButton1;
            }
        }
        
        public UIItem29ToggleButton1 UIItem29ToggleButton1
        {
            get
            {
                if ((this.mUIItem29ToggleButton1 == null))
                {
                    this.mUIItem29ToggleButton1 = new UIItem29ToggleButton1(this);
                }
                return this.mUIItem29ToggleButton1;
            }
        }
        
        public WpfButton UIPlätzeButton
        {
            get
            {
                if ((this.mUIPlätzeButton == null))
                {
                    this.mUIPlätzeButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIPlätzeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "plaetze";
                    this.mUIPlätzeButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlätzeButton;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public WpfToggleButton UIItem1ToggleButton
        {
            get
            {
                if ((this.mUIItem1ToggleButton == null))
                {
                    this.mUIItem1ToggleButton = new WpfToggleButton(this);
                    #region Suchkriterien
                    this.mUIItem1ToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "1";
                    this.mUIItem1ToggleButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem1ToggleButton;
            }
        }
        
        public UIItem10ToggleButton UIItem10ToggleButton
        {
            get
            {
                if ((this.mUIItem10ToggleButton == null))
                {
                    this.mUIItem10ToggleButton = new UIItem10ToggleButton(this);
                }
                return this.mUIItem10ToggleButton;
            }
        }
        
        public UIItem3ToggleButton UIItem3ToggleButton
        {
            get
            {
                if ((this.mUIItem3ToggleButton == null))
                {
                    this.mUIItem3ToggleButton = new UIItem3ToggleButton(this);
                }
                return this.mUIItem3ToggleButton;
            }
        }
        
        public UIItem11ToggleButton UIItem11ToggleButton
        {
            get
            {
                if ((this.mUIItem11ToggleButton == null))
                {
                    this.mUIItem11ToggleButton = new UIItem11ToggleButton(this);
                }
                return this.mUIItem11ToggleButton;
            }
        }
        
        public WpfToggleButton UIItem12ToggleButton
        {
            get
            {
                if ((this.mUIItem12ToggleButton == null))
                {
                    this.mUIItem12ToggleButton = new WpfToggleButton(this);
                    #region Suchkriterien
                    this.mUIItem12ToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "12";
                    this.mUIItem12ToggleButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem12ToggleButton;
            }
        }
        
        public WpfToggleButton UIItem0ToggleButton
        {
            get
            {
                if ((this.mUIItem0ToggleButton == null))
                {
                    this.mUIItem0ToggleButton = new WpfToggleButton(this);
                    #region Suchkriterien
                    this.mUIItem0ToggleButton.SearchProperties[WpfToggleButton.PropertyNames.Name] = "0";
                    this.mUIItem0ToggleButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItem0ToggleButton;
            }
        }
        
        public UIItem55ToggleButton UIItem55ToggleButton
        {
            get
            {
                if ((this.mUIItem55ToggleButton == null))
                {
                    this.mUIItem55ToggleButton = new UIItem55ToggleButton(this);
                }
                return this.mUIItem55ToggleButton;
            }
        }
        
        public WpfButton UIAnzeigeButton
        {
            get
            {
                if ((this.mUIAnzeigeButton == null))
                {
                    this.mUIAnzeigeButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIAnzeigeButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "anzeige";
                    this.mUIAnzeigeButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIAnzeigeButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIReservierenButton;
        
        private UIInhaltPane mUIInhaltPane;
        
        private UIItem6ToggleButton mUIItem6ToggleButton;
        
        private UIItem29ToggleButton mUIItem29ToggleButton;
        
        private WpfRadioButton mUIPMRadioButton;
        
        private UIItem6ToggleButton1 mUIItem6ToggleButton1;
        
        private UIItem29ToggleButton1 mUIItem29ToggleButton1;
        
        private WpfButton mUIPlätzeButton;
        
        private UIItemCustom mUIItemCustom;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private WpfToggleButton mUIItem1ToggleButton;
        
        private UIItem10ToggleButton mUIItem10ToggleButton;
        
        private UIItem3ToggleButton mUIItem3ToggleButton;
        
        private UIItem11ToggleButton mUIItem11ToggleButton;
        
        private WpfToggleButton mUIItem12ToggleButton;
        
        private WpfToggleButton mUIItem0ToggleButton;
        
        private UIItem55ToggleButton mUIItem55ToggleButton;
        
        private WpfButton mUIAnzeigeButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIInhaltPane : WpfPane
    {
        
        public UIInhaltPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfPane.PropertyNames.ClassName] = "Uia.ScrollViewer";
            this.SearchProperties[WpfPane.PropertyNames.AutomationId] = "inhalt";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UINeuButton
        {
            get
            {
                if ((this.mUINeuButton == null))
                {
                    this.mUINeuButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUINeuButton.SearchProperties[WpfButton.PropertyNames.Name] = "neu";
                    this.mUINeuButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUINeuButton;
            }
        }
        
        public WpfEdit UIKundennameEdit
        {
            get
            {
                if ((this.mUIKundennameEdit == null))
                {
                    this.mUIKundennameEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIKundennameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "kundenname";
                    this.mUIKundennameEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIKundennameEdit;
            }
        }
        
        public WpfDatePicker UIDateDatePicker
        {
            get
            {
                if ((this.mUIDateDatePicker == null))
                {
                    this.mUIDateDatePicker = new WpfDatePicker(this);
                    #region Suchkriterien
                    this.mUIDateDatePicker.SearchProperties[WpfDatePicker.PropertyNames.AutomationId] = "date";
                    this.mUIDateDatePicker.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDateDatePicker;
            }
        }
        
        public WpfButton UIPART_ButtonButton
        {
            get
            {
                if ((this.mUIPART_ButtonButton == null))
                {
                    this.mUIPART_ButtonButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIPART_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Button";
                    this.mUIPART_ButtonButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ButtonButton;
            }
        }
        
        public WpfButton UIPART_ButtonButton1
        {
            get
            {
                if ((this.mUIPART_ButtonButton1 == null))
                {
                    this.mUIPART_ButtonButton1 = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIPART_ButtonButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Button";
                    this.mUIPART_ButtonButton1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ButtonButton1;
            }
        }
        
        public WpfComboBox UIPlatzComboBox
        {
            get
            {
                if ((this.mUIPlatzComboBox == null))
                {
                    this.mUIPlatzComboBox = new WpfComboBox(this);
                    #region Suchkriterien
                    this.mUIPlatzComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "platz";
                    this.mUIPlatzComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlatzComboBox;
            }
        }
        
        public WpfButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISpeichernButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "speichern";
                    this.mUISpeichernButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        
        public WpfEdit UISearchIDEdit
        {
            get
            {
                if ((this.mUISearchIDEdit == null))
                {
                    this.mUISearchIDEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUISearchIDEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "searchID";
                    this.mUISearchIDEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISearchIDEdit;
            }
        }
        
        public WpfButton UISuchenButton
        {
            get
            {
                if ((this.mUISuchenButton == null))
                {
                    this.mUISuchenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISuchenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "suchen";
                    this.mUISuchenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISuchenButton;
            }
        }
        
        public WpfCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new WpfCustom(this);
                    #region Suchkriterien
                    this.mUIItemCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Reservieren";
                    this.mUIItemCustom.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfEdit UIPART_TextBoxEdit
        {
            get
            {
                if ((this.mUIPART_TextBoxEdit == null))
                {
                    this.mUIPART_TextBoxEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIPART_TextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PART_TextBox";
                    this.mUIPART_TextBoxEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_TextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUINeuButton;
        
        private WpfEdit mUIKundennameEdit;
        
        private WpfDatePicker mUIDateDatePicker;
        
        private WpfButton mUIPART_ButtonButton;
        
        private WpfButton mUIPART_ButtonButton1;
        
        private WpfComboBox mUIPlatzComboBox;
        
        private WpfButton mUISpeichernButton;
        
        private WpfEdit mUISearchIDEdit;
        
        private WpfButton mUISuchenButton;
        
        private WpfCustom mUIItemCustom;
        
        private WpfEdit mUIPART_TextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem6ToggleButton : WpfToggleButton
    {
        
        public UIItem6ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "6";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem29ToggleButton : WpfToggleButton
    {
        
        public UIItem29ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "29";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem6ToggleButton1 : WpfToggleButton
    {
        
        public UIItem6ToggleButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "6";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem29ToggleButton1 : WpfToggleButton
    {
        
        public UIItem29ToggleButton1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "29";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Platz";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIPlatzAnzeigeTable UIPlatzAnzeigeTable
        {
            get
            {
                if ((this.mUIPlatzAnzeigeTable == null))
                {
                    this.mUIPlatzAnzeigeTable = new UIPlatzAnzeigeTable(this);
                }
                return this.mUIPlatzAnzeigeTable;
            }
        }
        #endregion
        
        #region Fields
        private UIPlatzAnzeigeTable mUIPlatzAnzeigeTable;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIPlatzAnzeigeTable : WpfTable
    {
        
        public UIPlatzAnzeigeTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "PlatzAnzeige";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIItem2Row UIItem2Row
        {
            get
            {
                if ((this.mUIItem2Row == null))
                {
                    this.mUIItem2Row = new UIItem2Row(this);
                }
                return this.mUIItem2Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem2Row mUIItem2Row;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem2Row : WpfRow
    {
        
        public UIItem2Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "2";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIPlatzAAussenCell UIPlatzAAussenCell
        {
            get
            {
                if ((this.mUIPlatzAAussenCell == null))
                {
                    this.mUIPlatzAAussenCell = new UIPlatzAAussenCell(this);
                }
                return this.mUIPlatzAAussenCell;
            }
        }
        
        public UIFalseCell UIFalseCell
        {
            get
            {
                if ((this.mUIFalseCell == null))
                {
                    this.mUIFalseCell = new UIFalseCell(this);
                }
                return this.mUIFalseCell;
            }
        }
        #endregion
        
        #region Fields
        private UIPlatzAAussenCell mUIPlatzAAussenCell;
        
        private UIFalseCell mUIFalseCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIPlatzAAussenCell : WpfCell
    {
        
        public UIPlatzAAussenCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Platz";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIPlatzAAussenText
        {
            get
            {
                if ((this.mUIPlatzAAussenText == null))
                {
                    this.mUIPlatzAAussenText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIPlatzAAussenText.SearchProperties[WpfText.PropertyNames.Name] = "Platz A Aussen";
                    this.mUIPlatzAAussenText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlatzAAussenText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIPlatzAAussenText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIFalseCell : WpfCell
    {
        
        public UIFalseCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Reserviert";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIFalseText
        {
            get
            {
                if ((this.mUIFalseText == null))
                {
                    this.mUIFalseText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIFalseText.SearchProperties[WpfText.PropertyNames.Name] = "False";
                    this.mUIFalseText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFalseText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIFalseText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.Anzeigen";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIReservationenTable UIReservationenTable
        {
            get
            {
                if ((this.mUIReservationenTable == null))
                {
                    this.mUIReservationenTable = new UIReservationenTable(this);
                }
                return this.mUIReservationenTable;
            }
        }
        #endregion
        
        #region Fields
        private UIReservationenTable mUIReservationenTable;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIReservationenTable : WpfTable
    {
        
        public UIReservationenTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "Reservationen";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIItem3Row UIItem3Row
        {
            get
            {
                if ((this.mUIItem3Row == null))
                {
                    this.mUIItem3Row = new UIItem3Row(this);
                }
                return this.mUIItem3Row;
            }
        }
        
        public UIItem4Row UIItem4Row
        {
            get
            {
                if ((this.mUIItem4Row == null))
                {
                    this.mUIItem4Row = new UIItem4Row(this);
                }
                return this.mUIItem4Row;
            }
        }
        
        public UIItem5Row UIItem5Row
        {
            get
            {
                if ((this.mUIItem5Row == null))
                {
                    this.mUIItem5Row = new UIItem5Row(this);
                }
                return this.mUIItem5Row;
            }
        }
        #endregion
        
        #region Fields
        private UIItem3Row mUIItem3Row;
        
        private UIItem4Row mUIItem4Row;
        
        private UIItem5Row mUIItem5Row;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem3Row : WpfRow
    {
        
        public UIItem3Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "3";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIPlatzAAussenCell1 UIPlatzAAussenCell
        {
            get
            {
                if ((this.mUIPlatzAAussenCell == null))
                {
                    this.mUIPlatzAAussenCell = new UIPlatzAAussenCell1(this);
                }
                return this.mUIPlatzAAussenCell;
            }
        }
        
        public UIReneCell UIReneCell
        {
            get
            {
                if ((this.mUIReneCell == null))
                {
                    this.mUIReneCell = new UIReneCell(this);
                }
                return this.mUIReneCell;
            }
        }
        #endregion
        
        #region Fields
        private UIPlatzAAussenCell1 mUIPlatzAAussenCell;
        
        private UIReneCell mUIReneCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIPlatzAAussenCell1 : WpfCell
    {
        
        public UIPlatzAAussenCell1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Platz";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIPlatzAAussenText
        {
            get
            {
                if ((this.mUIPlatzAAussenText == null))
                {
                    this.mUIPlatzAAussenText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIPlatzAAussenText.SearchProperties[WpfText.PropertyNames.Name] = "Platz A Aussen";
                    this.mUIPlatzAAussenText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlatzAAussenText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIPlatzAAussenText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIReneCell : WpfCell
    {
        
        public UIReneCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Spielername";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIReneText
        {
            get
            {
                if ((this.mUIReneText == null))
                {
                    this.mUIReneText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIReneText.SearchProperties[WpfText.PropertyNames.Name] = "Rene";
                    this.mUIReneText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIReneText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIReneText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem4Row : WpfRow
    {
        
        public UIItem4Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "4";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIPlatzAAussenCell2 UIPlatzAAussenCell
        {
            get
            {
                if ((this.mUIPlatzAAussenCell == null))
                {
                    this.mUIPlatzAAussenCell = new UIPlatzAAussenCell2(this);
                }
                return this.mUIPlatzAAussenCell;
            }
        }
        #endregion
        
        #region Fields
        private UIPlatzAAussenCell2 mUIPlatzAAussenCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIPlatzAAussenCell2 : WpfCell
    {
        
        public UIPlatzAAussenCell2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Platz";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIPlatzAAussenText
        {
            get
            {
                if ((this.mUIPlatzAAussenText == null))
                {
                    this.mUIPlatzAAussenText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIPlatzAAussenText.SearchProperties[WpfText.PropertyNames.Name] = "Platz A Aussen";
                    this.mUIPlatzAAussenText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlatzAAussenText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIPlatzAAussenText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem5Row : WpfRow
    {
        
        public UIItem5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfRow.PropertyNames.Name] = "5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public UIPlatzAAussenCell3 UIPlatzAAussenCell
        {
            get
            {
                if ((this.mUIPlatzAAussenCell == null))
                {
                    this.mUIPlatzAAussenCell = new UIPlatzAAussenCell3(this);
                }
                return this.mUIPlatzAAussenCell;
            }
        }
        
        public UIRalfCell UIRalfCell
        {
            get
            {
                if ((this.mUIRalfCell == null))
                {
                    this.mUIRalfCell = new UIRalfCell(this);
                }
                return this.mUIRalfCell;
            }
        }
        #endregion
        
        #region Fields
        private UIPlatzAAussenCell3 mUIPlatzAAussenCell;
        
        private UIRalfCell mUIRalfCell;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIPlatzAAussenCell3 : WpfCell
    {
        
        public UIPlatzAAussenCell3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Platz";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIPlatzAAussenText
        {
            get
            {
                if ((this.mUIPlatzAAussenText == null))
                {
                    this.mUIPlatzAAussenText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIPlatzAAussenText.SearchProperties[WpfText.PropertyNames.Name] = "Platz A Aussen";
                    this.mUIPlatzAAussenText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPlatzAAussenText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIPlatzAAussenText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIRalfCell : WpfCell
    {
        
        public UIRalfCell(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Spielername";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIRalfText
        {
            get
            {
                if ((this.mUIRalfText == null))
                {
                    this.mUIRalfText = new WpfText(this);
                    #region Suchkriterien
                    this.mUIRalfText.SearchProperties[WpfText.PropertyNames.Name] = "Ralf";
                    this.mUIRalfText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIRalfText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIRalfText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem10ToggleButton : WpfToggleButton
    {
        
        public UIItem10ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "10";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem3ToggleButton : WpfToggleButton
    {
        
        public UIItem3ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "3";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem11ToggleButton : WpfToggleButton
    {
        
        public UIItem11ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "11";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItem55ToggleButton : WpfToggleButton
    {
        
        public UIItem55ToggleButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfToggleButton.PropertyNames.Name] = "55";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfControl UIPART_ThumbIndicator
        {
            get
            {
                if ((this.mUIPART_ThumbIndicator == null))
                {
                    this.mUIPART_ThumbIndicator = new WpfControl(this);
                    #region Suchkriterien
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.ControlType] = "Indicator";
                    this.mUIPART_ThumbIndicator.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_Thumb";
                    this.mUIPART_ThumbIndicator.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIPART_ThumbIndicator;
            }
        }
        #endregion
        
        #region Fields
        private WpfControl mUIPART_ThumbIndicator;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UISicherWindow : WinWindow
    {
        
        public UISicherWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sicher!";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Sicher!");
            #endregion
        }
        
        #region Properties
        public UIJAWindow UIJAWindow
        {
            get
            {
                if ((this.mUIJAWindow == null))
                {
                    this.mUIJAWindow = new UIJAWindow(this);
                }
                return this.mUIJAWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIJAWindow mUIJAWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIJAWindow : WinWindow
    {
        
        public UIJAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Sicher!");
            #endregion
        }
        
        #region Properties
        public WinButton UIJAButton
        {
            get
            {
                if ((this.mUIJAButton == null))
                {
                    this.mUIJAButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUIJAButton.SearchProperties[WinButton.PropertyNames.Name] = "Ja";
                    this.mUIJAButton.WindowTitles.Add("Sicher!");
                    #endregion
                }
                return this.mUIJAButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIJAButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIEssindkeineReservatiWindow : WinWindow
    {
        
        public UIEssindkeineReservatiWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Es sind keine Reservationen für den Namen:  vorhanden";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add("Es sind keine Reservationen für den Namen:  vorhanden");
            #endregion
        }
        
        #region Properties
        public WinText UIEssindkeineReservatiText
        {
            get
            {
                if ((this.mUIEssindkeineReservatiText == null))
                {
                    this.mUIEssindkeineReservatiText = new WinText(this);
                    #region Suchkriterien
                    this.mUIEssindkeineReservatiText.SearchProperties[WinText.PropertyNames.Name] = "Es sind keine Reservationen für den Namen:  vorhanden";
                    this.mUIEssindkeineReservatiText.WindowTitles.Add("Es sind keine Reservationen für den Namen:  vorhanden");
                    #endregion
                }
                return this.mUIEssindkeineReservatiText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIEssindkeineReservatiText;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            #endregion
        }
        
        #region Properties
        public UIItemTitleBar UIItemTitleBar
        {
            get
            {
                if ((this.mUIItemTitleBar == null))
                {
                    this.mUIItemTitleBar = new UIItemTitleBar(this);
                }
                return this.mUIItemTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTitleBar mUIItemTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIItemTitleBar : WinTitleBar
    {
        
        public UIItemTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UI-Test-Generator", "15.0.26208.0")]
    public class UIMainWindowWindow1 : WinWindow
    {
        
        public UIMainWindowWindow1()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
}
